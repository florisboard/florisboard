package dev.patrickgold.florisboard.ime.text.composing

import kotlinx.serialization.SerialName
import kotlinx.serialization.Serializable

@Serializable
@SerialName("kana-unicode")
class KanaUnicode : Composer {
    override val id: String = "kana-unicode"
    override val label: String = "Kana Unicode"
    override val toRead: Int = 1

    val sticky: Boolean = false

    private val daku = mapOf(
        '„ÅÜ' to '„Çî',

        '„Åã' to '„Åå',
        '„Åç' to '„Åé',
        '„Åè' to '„Åê',
        '„Åë' to '„Åí',
        '„Åì' to '„Åî',

        '„Åï' to '„Åñ',
        '„Åó' to '„Åò',
        '„Åô' to '„Åö',
        '„Åõ' to '„Åú',
        '„Åù' to '„Åû',

        '„Åü' to '„Å†',
        '„Å°' to '„Å¢',
        '„Å§' to '„Å•',
        '„Å¶' to '„Åß',
        '„Å®' to '„Å©',

        '„ÅØ' to '„Å∞',
        '„Å≤' to '„Å≥',
        '„Åµ' to '„Å∂',
        '„Å∏' to '„Åπ',
        '„Åª' to '„Åº',

        '„Ç¶' to '„É¥',

        '„Ç´' to '„Ç¨',
        '„Ç≠' to '„ÇÆ',
        '„ÇØ' to '„Ç∞',
        '„Ç±' to '„Ç≤',
        '„Ç≥' to '„Ç¥',

        '„Çµ' to '„Ç∂',
        '„Ç∑' to '„Ç∏',
        '„Çπ' to '„Ç∫',
        '„Çª' to '„Çº',
        '„ÇΩ' to '„Çæ',

        '„Çø' to '„ÉÄ',
        '„ÉÅ' to '„ÉÇ',
        '„ÉÑ' to '„ÉÖ',
        '„ÉÜ' to '„Éá',
        '„Éà' to '„Éâ',

        '„Éè' to '„Éê',
        '„Éí' to '„Éì',
        '„Éï' to '„Éñ',
        '„Éò' to '„Éô',
        '„Éõ' to '„Éú',

        '„ÉØ' to '„É∑',
        '„É∞' to '„É∏',
        '„É±' to '„Éπ',
        '„É≤' to '„É∫',

        '„Çù' to '„Çû',
        '„ÉΩ' to '„Éæ',
    )

    private val handaku = mapOf(
        '„ÅØ' to '„Å±',
        '„Å≤' to '„Å¥',
        '„Åµ' to '„Å∑',
        '„Å∏' to '„Å∫',
        '„Åª' to '„ÅΩ',

        '„Éè' to '„Éë',
        '„Éí' to '„Éî',
        '„Éï' to '„Éó',
        '„Éò' to '„Éö',
        '„Éõ' to '„Éù',
    )

    private val small = mapOf(
        '„ÅÇ' to "„ÅÅ",
        '„ÅÑ' to "„ÅÉ",
        '„Åà' to "„Åá",
        '„ÅÜ' to "„ÅÖ",
        '„Åä' to "„Åâ",

        '„Åã' to "„Çï",
        '„Åë' to "„Çñ",

        '„Å§' to "„Å£",

        '„ÇÑ' to "„ÇÉ",
        '„ÇÜ' to "„ÇÖ",
        '„Çà' to "„Çá",

        '„Çè' to "„Çé",
        '„Çê' to "õÖê",
        '„Çë' to "õÖë",
        '„Çí' to "õÖí",

        '„Ç¢' to "„Ç°",
        '„Ç§' to "„Ç£",
        '„Ç®' to "„Çß",
        '„Ç¶' to "„Ç•",
        '„Ç™' to "„Ç©",

        '„Ç´' to "„Éµ",
        '„ÇØ' to "„á∞",
        '„Ç±' to "„É∂",

        '„Ç∑' to "„á±",
        '„Çπ' to "„á≤",

        '„ÉÑ' to "„ÉÉ",
        '„Éà' to "„á≥",

        '„Éå' to "„á¥",

        '„Éè' to "„áµ",
        '„Éí' to "„á∂",
        '„Éï' to "„á∑",
        '„Éò' to "„á∏",
        '„Éõ' to "„áπ",

        '„É†' to "„á∫",

        '„É§' to "„É£",
        '„É¶' to "„É•",
        '„É®' to "„Éß",

        '„É©' to "„áª",
        '„É™' to "„áº",
        '„É´' to "„áΩ",
        '„É¨' to "„áæ",
        '„É≠' to "„áø",

        '„ÉØ' to "„ÉÆ",
        '„É∞' to "õÖ§",
        '„É±' to "õÖ•",
        '„É≤' to "õÖ¶",

        '„É≥' to "õÖß",
    )

    private val reverseDaku = mapOf(
        '„Çî' to '„ÅÜ',

        '„Åå' to '„Åã',
        '„Åé' to '„Åç',
        '„Åê' to '„Åè',
        '„Åí' to '„Åë',
        '„Åî' to '„Åì',

        '„Åñ' to '„Åï',
        '„Åò' to '„Åó',
        '„Åö' to '„Åô',
        '„Åú' to '„Åõ',
        '„Åû' to '„Åù',

        '„Å†' to '„Åü',
        '„Å¢' to '„Å°',
        '„Å•' to '„Å§',
        '„Åß' to '„Å¶',
        '„Å©' to '„Å®',

        '„Å∞' to '„ÅØ',
        '„Å≥' to '„Å≤',
        '„Å∂' to '„Åµ',
        '„Åπ' to '„Å∏',
        '„Åº' to '„Åª',

        '„É¥' to '„Ç¶',

        '„Ç¨' to '„Ç´',
        '„ÇÆ' to '„Ç≠',
        '„Ç∞' to '„ÇØ',
        '„Ç≤' to '„Ç±',
        '„Ç¥' to '„Ç≥',

        '„Ç∂' to '„Çµ',
        '„Ç∏' to '„Ç∑',
        '„Ç∫' to '„Çπ',
        '„Çº' to '„Çª',
        '„Çæ' to '„ÇΩ',

        '„ÉÄ' to '„Çø',
        '„ÉÇ' to '„ÉÅ',
        '„ÉÖ' to '„ÉÑ',
        '„Éá' to '„ÉÜ',
        '„Éâ' to '„Éà',

        '„Éê' to '„Éè',
        '„Éì' to '„Éí',
        '„Éñ' to '„Éï',
        '„Éô' to '„Éò',
        '„Éú' to '„Éõ',

        '„É∑' to '„ÉØ',
        '„É∏' to '„É∞',
        '„Éπ' to '„É±',
        '„É∫' to '„É≤',

        '„Çû' to '„Çù',
        '„Éæ' to '„ÉΩ',
    )

    private val reverseHandaku = mapOf(
        '„Å±' to '„ÅØ',
        '„Å¥' to '„Å≤',
        '„Å∑' to '„Åµ',
        '„Å∫' to '„Å∏',
        '„ÅΩ' to '„Åª',

        '„Éë' to '„Éè',
        '„Éî' to '„Éí',
        '„Éó' to '„Éï',
        '„Éö' to '„Éò',
        '„Éù' to '„Éõ',
    )

    private val reverseSmall = mapOf(
        '„ÅÅ' to '„ÅÇ',
        '„ÅÉ' to '„ÅÑ',
        '„ÅÖ' to '„ÅÜ',
        '„Åá' to '„Åà',
        '„Åâ' to '„Åä',

        '„Çï' to '„Åã',
        '„Çñ' to '„Åë',

        '„Å£' to '„Å§',

        '„ÇÉ' to '„ÇÑ',
        '„ÇÖ' to '„ÇÜ',
        '„Çá' to '„Çà',

        '„Çé' to '„Çè',


        '„Ç°' to '„Ç¢',
        '„Ç£' to '„Ç§',
        '„Ç•' to '„Ç¶',
        '„Çß' to '„Ç®',
        '„Ç©' to '„Ç™',

        '„Éµ' to '„Ç´',
        '„á∞' to '„ÇØ',
        '„É∂' to '„Ç±',

        '„á±' to '„Ç∑',
        '„á≤' to '„Çπ',

        '„ÉÉ' to '„ÉÑ',
        '„á≥' to '„Éà',

        '„á¥' to '„Éå',

        '„áµ' to '„Éè',
        '„á∂' to '„Éí',
        '„á∑' to '„Éï',
        '„á∏' to '„Éò',
        '„áπ' to '„Éõ',

        '„á∫' to '„É†',

        '„É£' to '„É§',
        '„É•' to '„É¶',
        '„Éß' to '„É®',

        '„áª' to '„É©',
        '„áº' to '„É™',
        '„áΩ' to '„É´',
        '„áæ' to '„É¨',
        '„áø' to '„É≠',

        '„ÉÆ' to '„ÉØ',
    )

    private val smallSentinel: Char = '„Äì'

    private fun isDakuten(char: Char): Boolean {
        return char == '„Çô' || char == '„Çõ' || char == 'Ôæû'
    }

    private fun isHandakuten(char: Char): Boolean {
        return char == '„Çö' || char == '„Çú' || char == 'Ôæü'
    }

    private fun isComposingCharacter(char: Char): Boolean {
        return char == '„Çô' || char == '„Çö'
    }

    private fun getBaseCharacter(c: Char): Char {
        return reverseDaku.getOrElse(c) {
            reverseHandaku.getOrElse(c) {
                reverseSmall.getOrElse(c) { c }
            }
        }
    }

    private fun <K>handleTransform(l: Char, c: Char, base: Map<Char, K>, rev: Map<Char, Char>, addOnFalse: Boolean): Pair<Int, String> {
        val char = getBaseCharacter(l)
        val trans = if (sticky) {
            base[char]
        } else {
            rev.getOrElse(l) { base[char] }
        }
        return if (trans != null) {
            1 to trans.toString()
        } else if (isComposingCharacter(l) && isComposingCharacter(c)) {
            1 to if (l == c && !sticky) { "" } else { ""+c  }
        } else {
            0 to if (addOnFalse) { ""+c } else { "" }
        }
    }

    override fun getActions(precedingText: String, toInsert: String): Pair<Int, String> {
        val c = toInsert.firstOrNull() ?: return 0 to toInsert
        // precedingText is "at least the last 1 character of what's currently here"
        if (precedingText.isEmpty()) {
            return if (c == smallSentinel || isComposingCharacter(c)) {
                0 to ""
            } else {
                0 to toInsert
            }
        }
        val lastChar = precedingText.last()

        return when {
            isDakuten(c) -> handleTransform(lastChar, c, daku, reverseDaku, true)
            isHandakuten(c) -> handleTransform(lastChar, c, handaku, reverseHandaku, true)
            c == smallSentinel -> handleTransform(lastChar, c, small, reverseSmall, false)
            else -> 0 to toInsert
        }
    }
}
